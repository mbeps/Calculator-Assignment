package uk.ac.rhul.cs2800;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class TestEntry {
  private Entry testFloat;
  private Entry testSymbol;
  private Entry testString;

  @Test
  void testFloatConstructor() { // Test 1
    /**
     * 1 - Created empty constructor (fail) 2 - Assignment implemented 3 - Getter
     * implemented to test
     */
    testFloat = new Entry(1.2F);
    assertEquals(testFloat.getNumber(), 1.2F);
  }

  @Test
  void testFloatConstructorInteger() { // Test 2
    /**
     * 1 - Fully functional with integers
     */
    testFloat = new Entry(5);
    assertEquals(testFloat.getNumber(), 5);
  }

  @Test
  void testStringConstructor() { // Test 3
    /**
     * 1 - Autogenerated constructor functional as it is the same layout as float
     * constructor
     */
    testString = new Entry("This is a test");
    assertEquals(testString.getString(), "This is a test");
  }

  @Test
  void testSymbolConstructor() { // Test 4
    /**
     * 1 - Constructor automatically generated 2 - Test failed due to comparing
     * `testSymbol.getOther()` with Symbol.PLUS.toString() 3 - Fixed by changing the
     * comparing to correct types
     */
    testSymbol = new Entry(Symbol.PLUS);
    assertEquals(testSymbol.getOther(), Symbol.PLUS);
  }

  @Test
  void getterSameSetterFloat() { // Test 5
    /**
     * 1 - Set multiple values using constructor and setter to see if the same value
     * is returned
     */
    float set = 5.6F;
    testFloat = new Entry(set);
    set = 9.2F;
    testFloat.setNumber(set);
    assertEquals(testFloat.getNumber(), set);
  }

  @Test
  void testEqualsSameObjects() { // Test 6
    /**
     * 1 - Hard coded to return false (pass) 2 - Check whether current object is the
     * same as the argument
     */
    Entry testFloat = new Entry(4.2F);
    Entry testFloat2 = new Entry(4.2F);

    assertEquals(testFloat.equals(testFloat2), true, "Check if the same 2 objects are equal");
  }

  @Test
  void testEqualsDifferentClass() { // Test 7
    /**
     * 1 - Hard coded to return false (pass) 2 - Check whether current class is the
     * same as the argument
     */
    Entry testFloat = new Entry(4.2F);
    Entry testString = new Entry("Test");

    assertEquals(testFloat.getClass().equals(testString.getClass()), testFloat.getClass() == testString.getClass(),
        "Check if 2 different types are different");
  }

  @Test
  void testEqualsSameClass() { // Test 8
    /**
     * 1 - Because 2 objects belong to the same class doesn't mean that they are
     * equal 2 - Check whether current class is the different as the argument
     */
    Entry testFloat = new Entry(4.2F);
    Entry testClass = new Entry(5.2F);

    assertEquals(testFloat.equals(testClass), false, "Check if 2 different classes are not equal");
  }

  @Test
  void testHashSameObject() { // Test 9
    /**
     * 1 - Hardcoded to return true
     */
    Entry testFloat = new Entry(4.2F);
    Entry testFloat2 = new Entry(4.2F);

    assertEquals(testFloat.hashCode() == testFloat2.hashCode(), true,
        "Check if the same 2 objects have the same hash value");
  }

  @Test
  void testHashDifferentObject() { // Test 10
    /**
     * 1 - Full hashCode implemented as it was easier. This test and next test
     * written together (failed) and then full implementation written (passed)
     */
    Entry testFloat = new Entry(4.2F);
    Entry testFloat2 = new Entry(4.3F);

    assertEquals(testFloat.hashCode() == testFloat2.hashCode(), false, "Check if different object have different hash");
  }

  @Test
  void testHashDifferentClass() { // Test 11
    Entry testFloat = new Entry(4.2F);
    Entry testString = new Entry("Test");

    assertEquals(testFloat.hashCode() == testString.hashCode(), false, "Check if different types have different hash");
  }
}
